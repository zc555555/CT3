# RUN: choco-opt -p check-assign-target,name-analysis,type-checking,warn-dead-code,choco-ast-to-choco-flat,choco-flat-introduce-library-calls,for-to-while "%s" | filecheck "%s"

# x: int = 0
#
# for x in [1, 2, 3, 4]:
#   print(x)

x: int = 0
itr: [int] = None
idx: int = 0

itr = [1, 2, 3, 4]
idx = 0
while idx < len(itr):
  x = itr[idx]
  print(x)
  idx = idx + 1

# CHECK:       builtin.module {
# CHECK-NEXT:    "choco_ir.func_def"() <{"func_name" = "_main", "return_type" = !choco_ir.named_type<"<None>">}> ({
# CHECK-NEXT:      %0 = "choco_ir.literal"() <{"value" = 0 : i32}> : () -> !choco_ir.named_type<"int">
# CHECK-NEXT:      %1 = "choco_ir.alloc"() <{"type" = !choco_ir.named_type<"int">}> : () -> !choco_ir.memloc<!choco_ir.named_type<"int">>
# CHECK-NEXT:      "choco_ir.store"(%1, %0) : (!choco_ir.memloc<!choco_ir.named_type<"int">>, !choco_ir.named_type<"int">) -> ()
# CHECK-NEXT:      %2 = "choco_ir.literal"() <{"value" = #choco_ir.none}> : () -> !choco_ir.named_type<"<None>">
# CHECK-NEXT:      %3 = "choco_ir.alloc"() <{"type" = !choco_ir.list_type<!choco_ir.named_type<"int">>}> : () -> !choco_ir.memloc<!choco_ir.list_type<!choco_ir.named_type<"int">>>
# CHECK-NEXT:      "choco_ir.store"(%3, %2) : (!choco_ir.memloc<!choco_ir.list_type<!choco_ir.named_type<"int">>>, !choco_ir.named_type<"<None>">) -> ()
# CHECK-NEXT:      %4 = "choco_ir.literal"() <{"value" = 0 : i32}> : () -> !choco_ir.named_type<"int">
# CHECK-NEXT:      %5 = "choco_ir.alloc"() <{"type" = !choco_ir.named_type<"int">}> : () -> !choco_ir.memloc<!choco_ir.named_type<"int">>
# CHECK-NEXT:      "choco_ir.store"(%5, %4) : (!choco_ir.memloc<!choco_ir.named_type<"int">>, !choco_ir.named_type<"int">) -> ()
# CHECK-NEXT:      %6 = "choco_ir.literal"() <{"value" = 1 : i32}> : () -> !choco_ir.named_type<"int">
# CHECK-NEXT:      %7 = "choco_ir.literal"() <{"value" = 2 : i32}> : () -> !choco_ir.named_type<"int">
# CHECK-NEXT:      %8 = "choco_ir.literal"() <{"value" = 3 : i32}> : () -> !choco_ir.named_type<"int">
# CHECK-NEXT:      %9 = "choco_ir.literal"() <{"value" = 4 : i32}> : () -> !choco_ir.named_type<"int">
# CHECK-NEXT:      %10 = "choco_ir.list_expr"(%6, %7, %8, %9) : (!choco_ir.named_type<"int">, !choco_ir.named_type<"int">, !choco_ir.named_type<"int">, !choco_ir.named_type<"int">) -> !choco_ir.list_type<!choco_ir.named_type<"int">>
# CHECK-NEXT:      "choco_ir.store"(%3, %10) : (!choco_ir.memloc<!choco_ir.list_type<!choco_ir.named_type<"int">>>, !choco_ir.list_type<!choco_ir.named_type<"int">>) -> ()
# CHECK-NEXT:      %11 = "choco_ir.literal"() <{"value" = 0 : i32}> : () -> !choco_ir.named_type<"int">
# CHECK-NEXT:      "choco_ir.store"(%5, %11) : (!choco_ir.memloc<!choco_ir.named_type<"int">>, !choco_ir.named_type<"int">) -> ()
# CHECK-NEXT:      "choco_ir.while"() ({
# CHECK-NEXT:        %12 = "choco_ir.load"(%5) : (!choco_ir.memloc<!choco_ir.named_type<"int">>) -> !choco_ir.named_type<"int">
# CHECK-NEXT:        %13 = "choco_ir.load"(%3) : (!choco_ir.memloc<!choco_ir.list_type<!choco_ir.named_type<"int">>>) -> !choco_ir.list_type<!choco_ir.named_type<"int">>
# CHECK-NEXT:        %14 = "choco_ir.call_expr"(%13) <{"func_name" = "len"}> : (!choco_ir.list_type<!choco_ir.named_type<"int">>) -> !choco_ir.named_type<"int">
# CHECK-NEXT:        %15 = "choco_ir.binary_expr"(%12, %14) <{"op" = "<"}> : (!choco_ir.named_type<"int">, !choco_ir.named_type<"int">) -> !choco_ir.named_type<"bool">
# CHECK-NEXT:        "choco_ir.yield"(%15) : (!choco_ir.named_type<"bool">) -> ()
# CHECK-NEXT:      }, {
# CHECK-NEXT:        %16 = "choco_ir.load"(%3) : (!choco_ir.memloc<!choco_ir.list_type<!choco_ir.named_type<"int">>>) -> !choco_ir.list_type<!choco_ir.named_type<"int">>
# CHECK-NEXT:        %17 = "choco_ir.load"(%5) : (!choco_ir.memloc<!choco_ir.named_type<"int">>) -> !choco_ir.named_type<"int">
# CHECK-NEXT:        %18 = "choco_ir.get_address"(%16, %17) : (!choco_ir.list_type<!choco_ir.named_type<"int">>, !choco_ir.named_type<"int">) -> !choco_ir.memloc<!choco_ir.named_type<"int">>
# CHECK-NEXT:        %19 = "choco_ir.load"(%18) : (!choco_ir.memloc<!choco_ir.named_type<"int">>) -> !choco_ir.named_type<"int">
# CHECK-NEXT:        "choco_ir.store"(%1, %19) : (!choco_ir.memloc<!choco_ir.named_type<"int">>, !choco_ir.named_type<"int">) -> ()
# CHECK-NEXT:        %20 = "choco_ir.load"(%1) : (!choco_ir.memloc<!choco_ir.named_type<"int">>) -> !choco_ir.named_type<"int">
# CHECK-NEXT:        "choco_ir.call_expr"(%20) <{"func_name" = "_print_int"}> : (!choco_ir.named_type<"int">) -> ()
# CHECK-NEXT:        %21 = "choco_ir.load"(%5) : (!choco_ir.memloc<!choco_ir.named_type<"int">>) -> !choco_ir.named_type<"int">
# CHECK-NEXT:        %22 = "choco_ir.literal"() <{"value" = 1 : i32}> : () -> !choco_ir.named_type<"int">
# CHECK-NEXT:        %23 = "choco_ir.binary_expr"(%21, %22) <{"op" = "+"}> : (!choco_ir.named_type<"int">, !choco_ir.named_type<"int">) -> !choco_ir.named_type<"int">
# CHECK-NEXT:        "choco_ir.store"(%5, %23) : (!choco_ir.memloc<!choco_ir.named_type<"int">>, !choco_ir.named_type<"int">) -> ()
# CHECK-NEXT:      }) : () -> ()
# CHECK-NEXT:    }) : () -> ()
# CHECK-NEXT:  }
